.. _game_module:

game.py
=======

Основной игровой модуль для онлайн-игры. Отвечает за логику многопользовательских сессий,
синхронизацию состояния между игроками и обработку всех игровых действий.

Что делает модуль:
- Создает и управляет игровыми комнатами
- Контролирует ход игры (раунды, таймеры, роли)
- Считает очки и определяет победителей
- Отправляет обновления всем игрокам
- Работает с базой данных для хранения состояния

Как это работает:
1. Игроки подключаются через API или WebSocket
2. Сервер обрабатывает действия (ходы, догадки)
3. Состояние автоматически обновляется у всех участников
4. Данные сохраняются в БД

Техническая основа:
- FastAPI - обработка запросов
- SQLAlchemy - работа с базой
- WebSockets - мгновенные обновления
- Асинхронные задачи - для таймеров и фоновых процессов


Глобальные переменные
--------------------

.. py:data:: room_timers
   :type: Dict[str, Dict]

   Словарь для хранения таймеров активных игровых комнат.
   Формат: ``{room_code: {"start_time": float, "duration": int, "end_time": float}}``

.. py:data:: timer_tasks
   :type: Dict[str, asyncio.Task]

   Словарь активных asyncio задач таймеров.
   Формат: ``{room_code: asyncio.Task}``

Модели данных
-------------

.. py:class:: GuessRequest
   :noindex:

   Модель запроса для отправки догадки:

   .. py:attribute:: guess
      :type: str

      Текст догадки игрока

.. py:class:: GameStateResponse
   :noindex:

   Модель ответа с состоянием игры:

   .. py:attribute:: currentWord
      :type: str
      :value: ""

      Текущее загаданное слово (только для объясняющего)

   .. py:attribute:: players
      :type: List[Dict]

      Список игроков с их статистикой

   .. py:attribute:: round
      :type: int

      Текущий раунд (1-based)

   .. py:attribute:: status
      :type: str
      :value: "WAITING|PLAYING"

      Статус игры (в верхнем регистре)

.. py:class:: ChatMessageRequest
   :noindex:

   Модель запроса для чата:

   .. py:attribute:: message
      :type: str

      Текст сообщения

Основные Endpoints
------------------

.. py:function:: get_game_state(room_code, db, current_user)
   :module: game
   :async:

   **GET /{room_code}/state**

   Возвращает текущее состояние игры:

   - Для объясняющего: включает секретное слово
   - Для угадывающих: маскированное состояние
   - Таймер раунда в секундах
   - Роли и очки игроков

   *Пример ответа*::

      {
        "currentWord": "яблоко",
        "players": [...],
        "round": 3,
        "status": "PLAYING",
        "timeLeft": 45
      }

.. py:function:: start_game(room_code, background_tasks, db, current_user)
   :module: game
   :async:

   **POST /{room_code}/start**

   Запускает новую игру:

   1. Валидирует права создателя комнаты
   2. Сбрасывает статистику игроков
   3. Выбирает первое случайное слово
   4. Назначает первого объясняющего
   5. Запускает таймер раунда
   6. Инициирует WebSocket рассылку

   *Особенности*:
   - Требует минимум 2 игрока
   - Автоматически стартует periodic state updates

.. py:function:: end_turn(room_code, background_tasks, db, current_user)
   :module: game
   :async:

   **POST /{room_code}/end-turn**

   Принудительно завершает текущий ход:

   1. Передает ход следующему игроку (round-robin)
   2. Обновляет раунд
   3. Выбирает новое слово
   4. Сбрасывает таймер
   5. Рассылает уведомления через WebSocket

   *Триггеры*:
   - Проверяет завершение игры (достигнут rounds_total)

.. py:function:: submit_guess(room_code, guess_data, background_tasks, db, current_user)
   :module: game
   :async:

   **POST /{room_code}/guess**

   Обрабатывает догадку игрока:

   - При правильном ответе:
     * Начисляет очки (10 - угадавшему, 5 - объясняющему)
     * Меняет роли игроков
     * Генерирует новое слово
     * Сбрасывает таймер
   - При ошибке: фиксирует статистику

   *WebSocket события*:
   - correct_guess/wrong_guess с деталями попытки

Вспомогательные функции
-----------------------

.. py:function:: send_game_state_update(room_code, db)
   :module: game
   :async:

   Рассылает актуальное состояние игры через WebSocket:

   1. Формирует базовое состояние для всех игроков
   2. Добавляет секретное слово в сообщение для объясняющего
   3. Обрабатывает таймеры в реальном времени

   *Оптимизации*:
   - Использует expire_all() для актуальности данных
   - Раздельные сообщения для разных ролей

.. py:function:: start_round_timer(room_code, duration, db)
   :module: game
   :async:

   Асинхронный таймер раунда:

   1. Ожидает указанную длительность (duration)
   2. По истечении:
      - Передает ход следующему игроку
      - Инкрементирует раунд
      - Проверяет условия завершения игры
      - Обновляет статистику
   3. Обрабатывает CancelledError при досрочном завершении

   *Механика*:
   - Использует глобальный room_timers для синхронизации
   - Автоматически запускает следующий таймер

.. py:function:: start_periodic_game_state_updates(room_code, db)
   :module: game
   :async:

   Фоновая задача для периодического обновления состояния:

   - Цикл с интервалом 2 секунды
   - Автоматически останавливается при завершении игры
   - Интегрируется с FastAPI BackgroundTasks

Обработка ошибок
----------------

Модуль генерирует следующие HTTP ошибки:

.. list-table:: Коды ошибок
   :header-rows: 1

   * - Код
     - Причина
   * - 403
     - Попытка начать игру не создателем
   * - 400
     - Недостаточно игроков для старта
   * - 404
     - Комната/игрок не найден
   * - 500
     - Ошибка выбора слова из БД

WebSocket события
----------------

Модуль генерирует следующие типы сообщений:

.. list-table:: Типы сообщений
   :header-rows: 1

   * - Тип
     - Назначение
   * - game_state_update
     - Полное состояние игры
   * - turn_changed
     - Уведомление о смене игрока
   * - correct_guess
     - Правильная догадка
   * - player_left
     - Выход игрока из комнаты
   * - game_finished
     - Завершение игры с победителем

Особенности реализации
----------------------

1. **Thread Safety**:
   - Глобальные словари (room_timers) защищены asyncio
   - SQLAlchemy сессии изолированы по запросам

2. **Performance**:
   - expire_all() для минимизации кеширования
   - Фоновые задачи для тяжелых операций

3. **State Management**:
   - Единый источник истины в БД
   - WebSocket как транспорт для синхронизации
