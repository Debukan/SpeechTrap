Документация API комнат (rooms.py)
==================================

Обзор
-----
Модуль rooms.py предоставляет функционал для управления игровыми комнатами в реальном времени. Основные возможности:

- Создание и удаление игровых комнат
- Подключение и отключение игроков
- Система чата между участниками
- Управление состоянием игровой сессии

Все запросы требуют аутентификации через JWT-токен в заголовке Authorization.

API Endpoints
------------

Создание комнаты
~~~~~~~~~~~~~~~~
.. http:post:: /rooms/create

   Создает новую игровую комнату с уникальным кодом. Создатель автоматически становится первым игроком.

   **Тело запроса:**

   .. code-block:: json

      {
        "code": "UNIQUE123",  // Уникальный код (4-10 символов)
        "max_players": 4,     // Макс. игроков (2-8)
        "rounds_total": 5,    // Количество раундов (3-10)
        "time_per_round": 60, // Время раунда в секундах (30-120)
        "difficulty": "medium" // Сложность (easy/medium/hard)
      }

   **Успешный ответ (201):**

   .. code-block:: json

      {
        "id": 42,
        "code": "UNIQUE123",
        "status": "waiting",
        "max_players": 4,
        "player_count": 1,
        "is_full": false,
        "players": [
          {
            "id": 1,
            "name": "Игрок1",
            "role": "waiting"
          }
        ]
      }

   **Возможные ошибки:**
   - 400: Неверные параметры или код уже занят
   - 403: Пользователь уже в другой комнате

Список активных комнат
~~~~~~~~~~~~~~~~~~~~~~
.. http:get:: /rooms/active

   Возвращает список доступных для подключения комнат.

   **Поля ответа:**
   - ``id``: ID комнаты
   - ``code``: Публичный код
   - ``status``: Текущий статус (waiting/playing/finished)
   - ``player_count``: Текущее количество игроков
   - ``max_players``: Максимальная вместимость

Подключение к комнате
~~~~~~~~~~~~~~~~~~~~~
.. http:post:: /rooms/join/{room_code}/{user_id}

   Добавляет игрока в существующую комнату. Генерирует событие 'player_joined' через WebSocket.

   **Параметры пути:**
   - ``room_code``: Видимый код комнаты
   - ``user_id``: ID подключаемого игрока

   **Успешный ответ (200):**

   .. code-block:: json

      {
        "message": "Успешное подключение",
        "room_code": "UNIQUE123",
        "player_id": 2
      }

   **Ошибки:**
   - 404: Комната не найдена
   - 400: Комната переполнена
   - 403: Игрок уже в комнате

Чат комнаты
~~~~~~~~~~~
.. http:post:: /rooms/{room_code}/chat

   Отправляет сообщение всем участникам комнаты через WebSocket.

   **Поток сообщений:**
   1. Пользователь отправляет POST-запрос
   2. Сервер рассылает сообщение всем участникам
   3. Пользователи получают обновление в реальном времени

   **Формат WebSocket-сообщения:**

   .. code-block:: json

      {
        "type": "chat_message",
        "player_id": 1,
        "player_name": "Игрок1",
        "message": "Привет!",
        "timestamp": 1678901234
      }

Технические детали
------------------

Управление состоянием
~~~~~~~~~~~~~~~~~~~~~
- Жизненный цикл комнаты:

  .. mermaid::
     stateDiagram
         [*] --> waiting: Создание
         waiting --> playing: Старт игры
         playing --> finished: Все раунды завершены
         finished --> [*]: Автоудаление

- Роли игроков:
  - ``waiting``: В лобби
  - ``explaining``: Объясняет слово
  - ``guessing``: Угадывает слово

Модели базы данных
~~~~~~~~~~~~~~~~~~
.. list-table:: Поля комнаты
   :header-rows: 1
   :widths: 20 20 60

   * - Поле
     - Тип
     - Описание
   * - code
     - String
     - Уникальный публичный идентификатор
   * - status
     - Enum
     - Текущая фаза игры
   * - current_round
     - Integer
     - Номер текущего раунда (начинается с 1)

WebSocket-события
~~~~~~~~~~~~~~~~
Все события содержат ``room_code`` и ``timestamp``:

.. list-table:: Типы событий
   :header-rows: 1
   :widths: 30 70

   * - Событие
     - Назначение
   * - player_joined
     - Новый участник подключился
   * - player_left
     - Игрок покинул комнату
   * - chat_message
     - Текстовое сообщение
   * - game_started
     - Начался первый раунд

Примеры сценариев
-----------------

Создание и подключение
~~~~~~~~~~~~~~~~~~~~~~
1. Игрок А создает комнату "GAME123"
2. Игрок Б подключается по коду
3. Оба получают уведомления через WebSocket

.. code-block:: python

   # Создание комнаты
   create_room("GAME123", max_players=4)

   # Подключение к комнате
   join_room("GAME123", user_id=2)

Старт игры
~~~~~~~~~~
1. Создатель нажимает "Начать игру"
2. Сервер:
   - Назначает первого объясняющего
   - Выбирает случайное слово
   - Запускает таймер раунда
3. Все пользователи получают обновленное состояние

Обработка ошибок
----------------
Все ошибки содержат:

.. code-block:: json

   {
     "detail": "Текст ошибки",
     "code": "код_ошибки",
     "status": 400
   }

Распространенные коды ошибок:
- ``room_full`` - комната переполнена
- ``room_not_found`` - комната не найдена
- ``invalid_parameters`` - неверные параметры запроса